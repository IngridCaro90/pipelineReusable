name: api-historical-events

on:
  workflow_call:
    inputs:
      MONTH:
        description: 'Ingrese el número del mes'
        required: true
        type: choice
        options: [ "01","02","03","04","05","06","07","08","09","10","11","12" ]

      DAY:
        description: 'Ingrese el número del día'
        required: true
        type: choice
        options: [ "01","02","03","04","05","06","07","08","09","10",
                   "11","12","13","14","15","16","17","18","19","20",
                   "21","22","23","24","25","26","27","28","29","30","31" ]

jobs:
  fetch-events:
    name: Fetch historical events from cached response API
    runs-on: ubuntu-latest
    outputs:
      events-list: ${{ steps.consult-json.outputs.events }}
      events-count: ${{ steps.consult-json.outputs.events_count }}

    steps:
      - name: Restore cache
        id: cache-restored
        uses: actions/cache/restore@v4
        with:
          path: response.json
          key: ${{ runner.os }}-${{ vars.LANG }}-${{ inputs.MONTH }}-${{ inputs.DAY }}

      - name: Fetch historical events from API response (Only if not cached)
        id: response-api
        if: steps.cache-restored.outputs.cache-hit != 'true'
        run: |
          curl -s "https://api.wikimedia.org/feed/v1/wikipedia/${{ vars.LANG }}/onthisday/selected/${{ inputs.MONTH }}/${{ inputs.DAY }}" -o response.json
          echo "file=response.json" >> $GITHUB_OUTPUT
          echo "API response fetched and saved to file."

      - name: Compute hash
        id: compute_hash
        run: |
          echo "hash=$(echo -n '${{ vars.LANG }}-${{ inputs.MONTH }}-${{ inputs.DAY }}' | sha256sum | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - name: Save response.json to cache
        uses: actions/cache/save@v4
        with:
          path: response.json
          key: ${{ runner.os }}-${{ vars.LANG }}-${{ inputs.MONTH }}-${{ inputs.DAY }}

      - name: Substract events from response.json
        id: consult-json
        run: |
          if [ -s response.json ]; then
            if jq empty response.json 2>/dev/null; then
              COUNT=$(jq '.selected | length' response.json)
              if [ "$COUNT" -eq 0 ]; then
                echo "Don't find events for the ${{ inputs.MONTH }}/${{ inputs.DAY }}."
                echo "events=[]" >> $GITHUB_OUTPUT
                echo "events_count=0" >> $GITHUB_OUTPUT
              else
                jq -c '[.selected[] | {title: .pages[0].title, url: .pages[0].content_urls.desktop.page}]' response.json > events_list.json
                EVENTS=$(cat events_list.json)
                echo "Se encontraron $COUNT eventos."
                echo "events=$EVENTS" >> $GITHUB_OUTPUT
                echo "events_count=$COUNT" >> $GITHUB_OUTPUT
              fi
            else
              echo "response.json no contiene JSON válido."
              echo "events=[]" >> $GITHUB_OUTPUT
              echo "events_count=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "response.json vacío. No se pudieron extraer eventos."
            echo "events=[]" >> $GITHUB_OUTPUT
            echo "events_count=0" >> $GITHUB_OUTPUT
          fi
  pdf-generation:
    name: Generate PDF with historical events
    runs-on: ubuntu-latest
    needs: fetch-events
    if: needs.fetch-events.outputs.events-count != '0'
    strategy:
      fail-fast: false
      matrix:
        page: ${{ fromJson(needs.fetch-events.outputs.events-list) }}

    steps:
      - name: Save name for PDF
        id: save-pdf-name
        run: |
          TITLE_EVENT=$(echo "${{ matrix.page.title }}" | tr ' ' '_' | tr -cd '[:alnum:]_')
          NAME_PDF="${{ inputs.MONTH }}-${{ inputs.DAY }}-${TITLE_EVENT}.pdf"
          echo "NAME_PDF=$NAME_PDF" >> $GITHUB_ENV

      - name: Cached PDF generated
        id: cache-pdf
        uses: actions/cache@v4
        with:
          path: ${{ env.NAME_PDF }}
          key: pdf-${{ env.NAME_PDF }}

      - name: Descargar página HTML
        run: curl -L "${{ matrix.page.url }}" -o page.html

      - name: Generate PDF from HTML
        if: ${{ steps.cache-pdf.outputs.cache-hit != 'true' }}
        uses: fifsky/html-to-pdf-action@master
        with:
          htmlFile: page.html
          outputFile: ${{ env.NAME_PDF }}

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME_PDF }}
          path: ${{ env.NAME_PDF }}
          retention-days: 1
